* Programming Erlang, 2nd Edition (Joe Armstrong)

** Part I

*** Concurrency =/= Parallelism

*Concurrency* is a imitation of doing multiple things simultaneously.
You can do stuff concurrently having just one physical processor - by
time sharing.

*Parallelism* is a feature of doing multiple things truly
simultaneously, but it requires to do them on multiple execution units
e.g. multiple physical cores or processors

** Part II

*** Erlang Shell

- Shortcuts are the same as the default keys in Emacs (editing mode).
- Quit? Double *CTRL-C*, *q().*, *init:stop()* or *halt*.

*** Syntax and Basic Types
*** Basic Concepts and Structures
*** Rest of Sequential Erlang

**** Dynamic Code Reloading

- At most two versions of a module can run at any one time.
  - Old version and new version, code which runs the oldest version
    will be killed. It works like a *shift register* - the last part
    is thrown away.
  - Fully qualified calls (`Mod:func(Arg1, ... , ArgN)`) will always
    use the newest version. Implicit calls internal to the module will
    use older version, until some execution flow will not call that
    function in a fully qualified way.

**** Preprocessor

- You can save output of preprocessor's work by command:
  - `erlc -P some_module.erl`

*** Types

- `typer` - Tool which shows the inferred types.
- `dialyzer` - Tool which infers problems related with type system.
  - Both tools are using *success typing* model.
  - Remember - type system is not sufficient for proving
    correctness. It may help with certain classes of problems.

*** Compiling and Running your program

- `.erlang` is a file which will be loaded when you start *Erlang
  shell* in that directory.
  - Loading order:
    - First it will load file from local directory, then from your
      $HOME directory.
- `code:clash().` shows an errors related with naming clashes.
- You can run code normally:
  - `erlc hello.erl`
  - `erl -noshell -s hello start -s init stop`
- Or by an escript:
  - `#!/usr/bin/env escript`
- Analyzing an *Erlang crash dump*?
  - `crashdump_viewer:start().`
  - And then go with browser to `http://localhost:8888`.

** Part III
