* 'Learn You Some Erlang for Great Good!'
** 'Let it Crash'
** Tools

Various tools (especially databases and with high requirements regarding distribution) are created in Erlang.

*** Services

- RabbitMQ
  - It has very nice simulator (Node.js based).
- Riak
- CouchDB

*** Developer Tools

- Rebar
  - Also has bootstrapping new application tool inside.
- Emacs
- EDoc Annotations

*** Libraries

- WebMachine
  - It has impressive tool which creates diagram for each request.

** OTP (Open Telecom Platform)

*** Processes

Each process has mailbox, which contains all messages which are send to it across its lifespan.
Process main loop should have state passed as an argument, and main loop should be a tail-recursive
function, where state is passed into each invocation.

*** Behaviors

It's a specification that dictates which functions your module should export. Concrete module
that declares that it conforms to a behavior and implement these functions. Run-time component
that can execute behavior-compliant module within the OTP context.

It's all about hiding internal details from user's view. We're preparing public methods which
wrap complexity and internal protocols, by exposing clear interface to the user.

Available behaviors:

**** Supervisor

Process which monitors state of other processes under his control, detects and restarts
the dead ones. Traps are helpful with detecting erroneous situations.

**** Links

A link is a specific kind of relationship that can be created between two processes.
When that relationships

**** Monitors

Monitors are what you want when a process wants to know what's going on with a second process,
but neither of them really are vital to each other.

It's a special type of link with two differences:

- Monitors are unidirectional.
- Monitors can be stacked.

Functions: erlang:monitor/2, erlang:demonitor/2 and erlang:spawn_monitor/1-3.

**** Named processes

It is way for registering process by names, and registering them locally (for single node)
or globally (across the cluster). Name should be a valid

Functions: erlang:register/2, erlang:whereis/1, erlang:unregister/1 and erlang:registered/0.
