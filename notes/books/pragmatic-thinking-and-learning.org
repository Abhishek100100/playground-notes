* Introduction

Software is created in your head.
My comment: so try to not put rubbish into it.

** Wetware

wetware - (etymology) *wet* + *software*; humorous analogy to the
software and hardware, but applied to the biological areas. It is
a reference to the water found in living creatures.

** Context

Context is the most important thing when learning, talking, applying
newly learned stuff. In other words context is a 'king' and should
taken into consideration always.

The key information about context is related with the paths in the
brains activated by certain actions - typing notes on the computer
and in the notebook with pen and paper have the same output.
However the way and creative process is very different between
these two approaches.

* Dreyfus Model of Skills Acquisition

Dreyfus brothers created very nice model (5 levels)
which applies to the single skill, because you can be
a novice in one skill and expert in the others.

** Beginners vs. Experts

Novices need context-free, exact and precise rules how and what to do it.
From the other hand experts should have freedom, if we're applying rules
and guidelines they are feeling constrained and they can't be effective
as they experts really are (*unconscious activities*).

** Levels

*** Novice

- Needs direct and explicit recipes.
- Rules and Commands are key to manage and starting the work.
- You can't define something explicitly with infinite recursion.
- Directions have to well defined, values have to be exact.
- Analogy: *Call Center workers*.

*** Advanced Beginner

- Some rules can be bound, some changed.
- But still have problems with troubleshooting.
- Needs answers fast, problems cause frustration.

*** Competent

- At first glance he is a solid, good worker.
- Experienced enough to solve standard problems.
- Don't afraid to troubleshoot, patiently strive to final answer.
- Delivers solutions, tested and solid.
- Reflection isn't standard thing.
- But it seems that some thoughts are appearing.

*** Proficient

- Efficient worker, solving complex problems related with domain.
- Experience starts to being his huge strength.
- Reflections, thoughts are on daily basis.
- It is a highest possible level for 98% of population.
- Competent, solid, skilled and mindful person.
- Sometimes appearing blinks of intuition.
- Sometimes using an analogies to describe things.

*** Expert

- Guru, authority in certain domain.
- Intuition is a key, they can't describe why something is good / bad.
- 'It just seems wrong' - expert's description of 'Why?'.
- Frustrated with many questions asked by novices and beginners.
- Sometimes they can describe how to do something.
- Things which looks like a magic can't be explained to the rest of the world.
- Operating with analogy and anecdotes.
- They are valid and appropriate for expert to explain some things.

** Main problems with acknowledging Dreyfus model

- Constraining experts with rules.
- Throwing out advanced beginners into deep water.
- Overwhelming beginners with pressure and amount of details.
- Exploiting advanced beginners and building false-positive self-esteem.
- The main problem is that Agile Development works well for mixed teams.
  - Not in the teams which is built from novices only.
  - Agile needs auto-reflection and self-guidance.
    - These are available only on the higher levels of Dreyfus scale.
- The main visualization of slowness of rules, is the 'work-to-rule'.
  - The main objective of this strike is following the rules to the level of absurd.
- Many people disqualify intuition as a non-scientific method.
  - Experts are using it properly, guides are necessary for beginners.
- Dreyfus skills distribution is not equal to the normal distribution.
  - Most of people are in the advanced beginner level.
  - Experts and Proficient people are the minor.
- "You should know what you don't know".
- Experts != Teachers.
  - In other words it is a different skill in which expert can be novice or advanced beginner.

** Evolution from beginner to an expert

- Evolution from the rules to the creative, intuition.
- Change in perception for observing problems.
  - Beginners see list of equal steps composed into problem.
  - Experts see different elements as more important than the others.
    - They're focused on more important things, rest is a trained, semi-automatic skill.
- Change in engagement - beginners are passive observers, doers only.
  - Experts are immersed into the problem, they're engaged improvisers.
- The main tools of experts are intuition and pattern matching.
- The easiest way to learn from experts is to mimic them.
  - R&D - Rip off and Duplicate
- Also getting responsibility for your decisions is important.
  - Following orders blindly do not create self-guidance in your attitude.
- Very interesting concept is related with "Shu Ha Ri"
  - Shu - Copy, imitate.
  - Ha  - Reflect, guide, learn.
  - Ri  - Transcend, improve, improvise.
- There are no substitutes for experience.
  - But the most important thing in the process is neither position or experience.
  - Value which you can introduce matters the most.
- Evolution should be performed in safe environment, with solid "timing".
- And most important - Expertise is not permanent - keep practicing to remain an expert.
- Individuals > Herd.
  - Individuals are responsible, creative and critique about others.
  - Herd is oriented around formal rules, group responsibilities. They're "monkeys".
- Talking about something all the time makes it irrelevant.
- And the most important thing - Dreyfus is only a model, "one side does not fit all".
  - Model is a tool, not a mirror.

* Kruger-Dunning Effect

It is an effect observed by two psychologists, which is based on too high and
false self-esteem. Advanced beginners are acting like the experts, when they
are not, because they cannot know better tools and they do not have enough
skills in order to solve the problem differently and properly.

They have described a case of thief, which thought that pouring lemon juice on his
face and skin will let him be invisible for CCTV cameras. Obviously, the plan
did not work out and he get caught. But he's an obvious observation that such
observed effect exists.

That attitude is common for advanced beginners, especially in software development.
There are plenty of people that claim that they can do everything, each time.
However, after they reach certain level, near to the expertise, they will
acknowledge how little they knew before.
