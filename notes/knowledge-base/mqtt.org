* MQTT

** Introduction and Features

- Lightweight, binary message protocol.
  - Transport level.
    - For slow connections.
    - For connections with expensive bandwidth.
  - Broker oriented.
    - CLIENT <-> BROKER <-> CLIENT
    - Decouple *PUB* from *SUB*.
- Use case: *publish / subscribe*.
- *TCP / IP* based.
- Simple to implement on client-side.
- It is not a queuing protocol.
  - No queues (beside [[Sessions]]).
- Subject based ([[Topics]]).
- Multiple [[Quality of Service levels (*QoS*)]].

** Topics

This is a way of routing which client receives what.
Example: `this\is\topic\a`.

It is an UTF-8 string, case sensitive, any alphanumeric character
beside '\' is allowed. Each broker has *SYS-topics* which reveals
internal statistics and information.

Subscription supports *wild cards*:

- '+' - one level: `this\is\topic+`
- '#' - multiple levels: `this\#`
- '$' - topic beginning with: `$this`

When designing topics structure:

- Play with sane rules.
- Clean, short topics.
- ASCII >> UTF-8
- Do not subscribe to `#` on the root level.

** Quality of Service levels (*QoS*)

Three levels

- 0 - at most once (*fire and forget*).
- 1 - at least once (*delivery guarantee*).
  - Broker acknowledges the message.
    - *PUBLISH*, *PUBACK*.
- 2 - exactly once (*strict delivery guarantee*).
  - Safest and slowest.
  - Two way flow of acknowledgments.
    - *PUBLISH*, *PUBREC*, *PUBREL*, *PUBCOMP*.

Messages with *QoS* 1 and 2 are queued in a persistent session span
(see in [[Sessions]]).

** Sessions

MQTT has a persistent session mechanism, for creating stable
connection for client's which has worse connectivity capabilities and
e.g. can very easily reconnect. Persistent sessions are designed to
overcome such problems.

On the broker side, we need to provide following features:

- Existence of session.
- All subscriptions should be stored.
- Messages with *QoS* 1 or 2 unconfirmed by client.
- New messages with *QoS* 1 or 2.

But client should also store something:

- All messages with *QoS* 1 or 2 unconfirmed by broker.
- All received messages with *QoS* 2 unconfirmed by broker.

** Retained Messages

What if client subscribes to the topic and will wait for the next
messages couple hours, in the dark?

We can avoid that by introducing immediate response, with *last known
good value* called retained message. It is a normal message with flag
*retained* set to *true*. Similar to the *sticky topic* at forum.

Retained message can be defined per topic, but if client will
subscribe to multiple topics via wild cards it will receive all
retained messages for each. After subscription client will receive
message only once. Instead of waiting couple hours for the state,
client can immediately receive last state after connecting.

When client will send the *retained* message, broker will store it and
*QoS*. Each new message will override the last known state. If you
want to delete it, you just send the retained message with empty
payload.
** Last Will and Testament

This is a feature which helps detect and inform other subscribers that
client abruptly closed connection. When connecting to the broker,
client can defined *Last Will and Testament* message (LWT), which will
be send this message to the subscribers of this topic, when it will
terminate unsuccessfully. Only when client successfully send
*DISCONNECT* message, *LWT* will be discarded. You can specify *LWT*
values with *CONNECT* message (topic, QoS and message).

When broker will send *LWT*:

- An I/O error or network failure is detected by the server.
- The client fails to communicate within the *Keep Alive* time.
- The client closes the network connection without sending a
  *DISCONNECT* packet first.
- The server closes the network connection because of a protocol
  error.

** Keep Alive

It can happen that one of the communicating parties gets out of sync
with the other, often due to a crash of one side or because of
transmission errors. This state is called a *half-open
connection*. The important point is that the still functioning end is
not notified about the failure of the other side and is still trying
to send messages and wait for acknowledgments.

It amplifies on high-latency networks like mobile or satellite
links. It’s quite possible for a TCP session to *black hole*, i.e. it
appears to be open still, but in fact is just dumping anything you
write to it onto the floor.

The *keep alive* functionality assures that the connection is still
open and both broker and client are connected to one
another. Therefore the client specifies a time interval in seconds and
communicates it to the broker during the establishment of the
connection. The interval is the longest possible period of time, which
broker and client can endure without sending a message.

It is a client responsibility to be sure that connection is alive. In
the absence of sending any other control packets in that time
interval, the client *must* send a *PINGREQ* packet. It will receive
*PINGRESP* as a response to that message. Both packets does not have
any payload or additional meta data.

If broker will not receive any *PINGREQ* packet during that interval
it will close the connection and will use *last will and testament*
messages.

The maximum keep alive is 18h 12min 15 sec. If the keep alive interval
is set to 0, the keep alive mechanism is deactivated.

*** Client Take-Over

A disconnected client will most likely try to connect again. It could
be the case that the broker still has an *half-open connection* for the
same client. In this scenario the *MQTT* will perform a so-called *client
take-over*. The broker will close the previous connection to the same
client (determined by the same client identifier) and establishes the
connection with the newly connected client. This behavior makes sure
that half-open connection won’t stand in the way of a new connection
establishment of the same client.

** MQTT over Web Sockets

Until it won't be possible to open *raw socket* from the browser
directly (http://www.w3.org/TR/raw-sockets/) we need to wrap MQTT
message into WebSocket frames. Every single feature of MQTT can be
simulated with use of WebSockets transport.

** Security

*** Authentication

Authentication is part of the transport and application level security
in MQTT. On the transport level TLS can guarantee authentication of
the client to the server using client certificates and of the server
to the client validating the server certificate. On the application
level the MQTT protocol provides username and password for
authentication.

Message `CONNECT` contains username and password headers, you will
receive with `CONNACK` an error code if credentials are not passed or
invalid. The only way to guarantee a completely secure transmission of
username and password is to use transport encryption.

*** Authentication with other parameters

Beside *username* and *password* `MQTT` provides additional ways of
authenticate client. Each client has *unique client identifier* - it
is a 36 character long unique identifier, good practice is use a
*GUID* here or a *device serial number*, *MAC address*. By
white-listing client identifiers you can provide another way of
authentication.

Another form of authentication can be provided by a *X.509* client
certificate. It can be presented during *TLS* handshake, one layer
lower than actual *MQTT* protocol. If you are controlling all devices
and its provisioning it is a very good way to providing
authentication.
