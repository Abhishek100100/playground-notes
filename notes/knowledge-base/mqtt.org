* MQTT

** Introduction and Features

- Lightweight, binary message protocol.
  - Transport level.
    - For slow connections.
    - For connections with expensive bandwidth.
  - Broker oriented.
    - CLIENT <-> BROKER <-> CLIENT
    - Decouple *PUB* from *SUB*.
- Use case: *publish / subscribe*.
- *TCP / IP* based.
- Simple to implement on client-side.
- It is not a queuing protocol.
  - No queues (beside [[Sessions]]).
- Subject based ([[Topics]]).
- Multiple [[Quality of Service levels (*QoS*)]].

** Topics

This is a way of routing which client receives what.
Example: `this\is\topic\a`.

It is an UTF-8 string, case sensitive, any alphanumeric character
beside '\' is allowed. Each broker has *SYS-topics* which reveals
internal statistics and information.

Subscription supports *wild cards*:

- '+' - one level: `this\is\topic+`
- '#' - multiple levels: `this\#`
- '$' - topic beginning with: `$this`

When designing topics structure:

- Play with sane rules.
- Clean, short topics.
- ASCII >> UTF-8
- Do not subscribe to `#` on the root level.

** Quality of Service levels (*QoS*)

Three levels

- 0 - at most once (*fire and forget*).
- 1 - at least once (*delivery guarantee*).
  - Broker acknowledges the message.
    - *PUBLISH*, *PUBACK*.
- 2 - exactly once (*strict delivery guarantee*).
  - Safest and slowest.
  - Two way flow of acknowledgments.
    - *PUBLISH*, *PUBREC*, *PUBREL*, *PUBCOMP*.

Messages with *QoS* 1 and 2 are queued in a persistent session span
(see in [[Sessions]]).

** Sessions

MQTT has a persistent session mechanism, for creating stable
connection for client's which has worse connectivity capabilities and
e.g. can very easily reconnect. Persistent sessions are designed to
overcome such problems.

On the broker side, we need to provide following features:

- Existence of session.
- All subscriptions should be stored.
- Messages with *QoS* 1 or 2 unconfirmed by client.
- New messages with *QoS* 1 or 2.

But client should also store something:

- All messages with *QoS* 1 or 2 unconfirmed by broker.
- All received messages with *QoS* 2 unconfirmed by broker.

** Retained Messages

What if client subscribes to the topic and will wait for the next
messages couple hours, in the dark?

We can avoid that by introducing immediate response, with *last known
good value* called retained message. It is a normal message with flag
*retained* set to *true*. Similar to the *sticky topic* at forum.

Retained message can be defined per topic, but if client will
subscribe to multiple topics via wild cards it will receive all
retained messages for each. After subscription client will receive
message only once. Instead of waiting couple hours for the state,
client can immediately receive last state after connecting.

When client will send the *retained* message, broker will store it and
*QoS*. Each new message will override the last known state. If you
want to delete it, you just send the retained message with empty
payload.
** Last Will and Testament

This is a feature which helps detect and inform other subscribers that
client abruptly closed connection. When connecting to the broker,
client can defined *Last Will and Testament* message (LWT), which will
be send this message to the subscribers of this topic, when it will
terminate unsuccessfully. Only when client successfully send
*DISCONNECT* message, *LWT* will be discarded. You can specify *LWT*
values with *CONNECT* message (topic, QoS and message).

When broker will send *LWT*:

- An I/O error or network failure is detected by the server.
- The client fails to communicate within the *Keep Alive* time.
- The client closes the network connection without sending a
  *DISCONNECT* packet first.
- The server closes the network connection because of a protocol
  error.

** Keep Alive
