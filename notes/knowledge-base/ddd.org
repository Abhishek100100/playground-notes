* Domain Driven Design

** Modeling Whirlpool.

It is an agreement between business and the team that we are working on the
same project, with the same mental model of product, logic and domain. We both
take care on ubiquitous language, acceptance tests and criteria.

** What is a model?

- Database is not a model.
  - Code should be a model.
    - We should map the distilled core domain with 1:1 accuracy to the code.
  - What should be in distilled core domain?
    - It depends - in most cases it is a several percent of whole application.
    - There is no need in using DDD in whole application, sometimes simpler is better.
  - All terms coined during the talk with domain expert should be represented in the code.
- Complexity:
  - Essential Complexity - nature of the problem, unavoidable.
    - If written in wrong way, it can be a technical debt.
  - Accidental Complexity - introduced by a solution, boundless and inherited.
    - It is definitely a technical debt.
- Building Blocks:
  - Knowledge Level
    - Decision Support - business intelligence, suggestions, learning.
    - Policies - closure, supple of operations, changeable things.
  - Operational Level
    - Operations - application layer, use cases, user stories, domain orchestration.
    - Capabilities - core domain logic, aggregates, encapsulation of domain rules.
- Knowledge Crunching.
  - Iterative model of implementing behaviors described by model.
  - After several meetings we know more and more about the system and actual requirements.
- Tips and Tricks:
  - Do not hack your model.
  - If your mental model of domain logic was changed, change your model as well.
  - Gibberish Game
    - Do not name your elements of model too early.
    - Name it at first as `foo` and describe its rules and features.
    - Proper and what is even more important - descriptive and clear name will
      appear after a while.
    - If `foo` sounds offensive and not appropriate use Greek letters instead.

** Building Blocks - Catalog

*** Value Object

- Immutable Type.
- Wrapper with business meaning for primitive and not meaningful types.
  - Money, Timestamp, etc.
- Very common approach is to use a design pattern called Adapter.
- Value objects are mostly in capability layer.

*** Entity

- Element of capabilities layer.
- Stores data and it will be serialized to the database.
- Thin, anemic, business logic - only related with entity.
- Mutable.

*** Aggregate

- Encapsulates entities and value objects.
- Encapsulates logic, do not share logic and knowledge with outside world.
- All aggregates are inside operations layer.
- It models invariants.
  - Aggregate should contain methods with changes invariants.
  - Nothing more, nothing less.
  - Securing invariants in all places across the aggregate operations.
  - Boxes for the essential complexity.
- Encapsulation of unknown complexity and business logic.
  - Expose projections, not the actual implementation and structure.
  - Repacking structures from one to another.
- Good object (and aggregate as well) is:
  - Introverted.
  - Apathetic.
  - Selfish.
- Aggregate Root should contain common operations for all aggregates.
  - But it can also contain policies and contracts which enforces best practices.
    - Uncommitted changes example.

*** Domain Service

- Stateless representation of certain operations.
- Transforming e.g. one aggregate into another.
  - Input - Output.
- Represented as function, class with one method (the best - a static one).
- Implementation of algorithm which can be extended by strategies/policies.
  - It is called a closure, supple.

*** Policy