* Compilers

** AST

AST (or *Abstract Syntax Tree) is a data structure which represents the program 
structure, with distinctions for syntax elements, syntactic constructs after
parsing it from the tokenized version.

** IR

Intermediate Representation (*IR*) - it is helping compiler developers, "seeing" some
stuff, optimizing patterns before generating the final machine or byte code.

** JIT

JIT (or *Just in Time* compilation mechanism) is a method for optimizing code right
before executing interpreter's / compiler's output. We are trying to detect certain
patterns and optimize them properly with different techniques.

In JITting important is a process called "spilling" - it is responsible of 
saving / restoring registers to / from memory.

*** Memory Allocation

It is a process of gathering and creating memory space for the code, data and so on.
Should it be created for every AST node? Not really, with big code's size result may
become too big to be fit entirely into the CPU's cache, causing potential problems
to the whole system.

There is a better approach. In V8 (JavaScript engine created by Google) there is a 
concept of stub, shared procedure, shared code block. They can be lazily compiled
(of course if not used) and more other optimizations can be applied to them after 
the first pass.

Heap is a place for creating and storing objects (usually too big for CPU registers).
Live objects and their references create a directed graph, starting in a ROOT (e.g. 
global variables and pointers on the stack).

**** Garbage Collection

Another thing related with Memory Allocation is process of Garbage Collection (*GC*).

Fixed-page Bump Allocation is a process of allocating a chunk of fixed size memory
(a page). Then we are giving away consequent slices of it as a return value 
of allocation procedure. When we are running low on memory, perform the GC and
free all unused space. For live objects you can compact them or move
to the new memory chunk.

*** Numbers

We have to support in JIT both, integers and floating points (called further a doubles)
being aware of performance and accuracy problems.

How to differ numbers from pointers (heap objects)? 

There is a method called tagging, on the least significant bit of the 64 bit 
register we put 0 for SMI and 1 for pointers. SMI is an acronym for small integers.
