* Elixir Conf EU - 2015

** Training - OTP and Elixir (22.04.2015)

- At a time that *Ericsson* developed *Erlang* there were notion of
  design patterns.
  - Expertise knowledge needed for reading documentation.
  - Elixir brings tooling and fixed conventions, which is good.
- Features of *telecom systems* are present in today web applications,
  e.g. WhatsApp is scaling to 1M per box, peaks 3M per box.
  - Interesting: hot code swap is not so important today as it is was
    in the past regarding production systems, hardware and
    infrastructure is cheaper and easier to manage.
    - But in development mode is an awesome thing, it shortens the
      feedback loop.
- *OTP* - Bigger picture, system design principles.
  - *BOS* is a basic operating system, built-in OTP.
  - One, standard way to do a thing, e.g. applications, releases.
  - On the top we have *release*, which is:
    - *ERTS* (Erlang Run-Time System) built-in.
    - A set of *OTP* applications that work together.
    - Standardized way of starting, stopping and managing
      applications.
    - It is an downgrade / upgrade unit.
  - A *release* consists of *applications*, which is:
    - Logical unit of processes and modules grouped together to
      perform a given task.
    - We have two types of processes:
      - *Supervisors* which supervises other processes (workers or
        supervisors) which are trapping other exit signals.
        - Supervisor shouldn't do meaningful work, even the
          initialization should be moved to the workers.
        - Only the first start state will be applied and passed to the
          children, supervisor itself does not have any callback which
          is executed on each children restart.
      - *Workers* which does meaningful work and exit (abnormally or
        normally).
  - All patterns are applied by *behaviors*, formalization of design
    pattern.
    - Often `Module:start/1` is called in different context and spawns
      new process.
    - Behavior splits specific and generic elements, specific will be
      implemented by end user. Less code to develop, less bug, better
      tests, free built-in features, but it affects performance and
      has steep learning curve.
  - *Elixir* its own behavior's implementation of:
    - GenServer
    - GenEvent
    - Supervisor
  - In all cases you are receiving the "sensible" defaults thanks to the
    meta-programming. It is a problem "implicit" vs. "explicit".
      - Specific details:
        - `start_link` implementation is synchronous and atomic.
        - Try to avoid spending too much time in `init/1`. Everyone
          will wait on your `init/1`, when `start_link` functions are
          executing. It is a synchronous call, so maybe boot sequence
          can be your critical section in terms of performance.
        - Remember about `start_link` also in the context of clean
          termination, not only escalating erroneous case.
        - You can do multiple `handle_call` in parallel, by spawning
          background job and referring (using reference) to the request
          from that. On the client side it will look like a blocking call,
          but *GenServer* can handle rest synchronous calls either way.
        - You can register your behavior globally (for whole cluster),
          by passing `{:global, name}` to the options.
        - For *Supervisor* we have similar semantics for
          `start_link`. It is synchronous and atomic.
          - In the `Mod:init/1` we return supervisor specification. It
            consists of:
            - Supervision strategy - `:one_for_one`, `:one_for_all`,
              `:rest_for_one` (left to right direction, order in the
              children list matter, latter elements are older and
              dependent on the earlier) and `:simple_one_for_one`
              (which is the same as `:one_for_one`, but all children
              shares the way of starting, they are same type and
              amount of them is dynamic, lots of them).
            - Maximum number of restarts and maximum time for that
              restarts. If the maximum amount of restarts in that time
              is hit, supervisor will be terminated. Crashes propagate
              among supervisors.
            - Children specification - Name, Start function (*MFA*
              triple), Restart type (`:permanent`, `:transient` or
              `:temporary`), shutdown time, process type, modules
              (list of modules for release handlers, necessary for hot
              code swap).
        - Application Controller manages the Application Master (each
          application has two processes for master), which contains
          application supervision trees.
          - Application master will kick in the top level supervisors.
        - Applications can be distributed, you can define main node,
          and its fail-over (when master fails) or takeover nodes
          (when master returns after a fail), in the Erlang
          cluster. It will not preserve state, but you will receive
          information if it is takeover of fail-over.
  - Distributed Erlang and Elixir.
    - `iex --sname foo` - `sname` here means *short name*.
    - `iex --name foo` - `name` here means *full name* (it means that
      host is a *FQDN* (Fully Qualified Domain Name) and uses *DNS*).
      - Then you can spawn processes, send messages across the cluster.
    - Cookies are not the security mechanism, more rather a logical
      partitioning of the cluster.
      - If there is no cookie passed in command line, it will be
        generated for you and stored in the `~/.erlang.cookie`.
    - You are passing explicitly node name or use `:global`
      registered names, which have to be unique across cluster.
    - Technically it is a full mesh of *TCP/IP*, explicitly setup by
      the run-time. It will be build with first call between groups
      of nodes. You can hide node from the cluster perspective, it
      is not a part of cluster, only for doing an observations.
      - Biggest *Erlang* cluster consists of 70 nodes, and was built
        for *DemonWare* for *Call of Duty* messaging.
      - *EPMD* (Erlang Port Mapper Daemon, by default 4369) is
        responsible for opening and managing ports for *TCP/IP*
        connections.
  - Some of naming conventions are nice to follow e.g. naming start
    methods after `GenServer.start_link/3`.
    - Tools for enforcing naming conventions - it may be done by
      `inaka/elvis` (*CTA*: check that).
    - Not following the conventions can be painful e.g. I've spent 15
      minutes investigating why my supervision tree was not starting,
      and I found out that I forgot implement
      `AbacusServer.start_link/0` in my module. Explicitness is not
      bad, *Elixir* hides many things, but decrease also your
      awareness.
  - You can apply `timeout` for your `handle_*` callbacks, and after
    no message will hit mailbox during that timeout process will
    receive `handle_info`. But you need to encode additional
    information from where it comes.
  - *BIF* (Built-In Functions, supported by *Ericsson*) and *NIF*
    (Native Implementation Functions, API managed by *Ericsson* but
    you are writing the C code). But by using *NIF* you can mess the
    *Erlang* scheduler (because if your *NIF* took more reductions
    than claimed it will starve other processes, each equal priority
    process has constant amount of reductions per round).
  - *Ports* are external OS processes which are treated as an *Erlang*
    process. It can be a part of the supervision tree etc.
  - Release management in *Elixir* - use `exrm` tool. But it is an
    additional dependency.
  - Tools:
    - Wombat OAM can check overall health of the *Erlang* system with
      a specific interval (e.g. invoking `erlang:process_info/1` for each
      process).
    - Also amazing tool from Fred Hebert - `recon`.
  - Shell and Libraries:
    - `{:ok, pid} = v(1)` - `v(N)` is a function which returns value
      of expression in *Nth* line of shell.
    - `:application.which_applications` - list of all started
      applications.
    - `:sys.log(pid, flag)` enables logging for OTP compliant process.
      - The same applies for `:sys.trace` and `:sys.statistics`.
  - Questions:
    - Why Elixir uses prefix in the module names on the Erlang side?
      - Because you can name Erlang modules with an upper case (a
        proper escaped atom). And it in that way is avoiding clashes.
    - What adds the `:proc_lib` for us? What is the benefit of using it?
      - You can fit the custom process into your OTP application
        supervision tree, provide a true synchronous, acknowledged
        `start_link` function, add the debugging facilities and also
        you can provide system messages support inside your loop.
        - [[http://www.erlang.org/doc/design_principles/spec_proc.html][More details]]
    - Why they're 2 application master per application?
      - There are not 2 masters, but a different process structure
        represented [[https://github.com/erlang/otp/blob/maint/lib/kernel/src/application_master.erl#L83][here]]. Mostly it is related with a synchronous
        `application:start/2`, application master which is a *group
        leader* and using I/O during the start phase. In order to
        avoid deadlocks there is a different, intermediate "invisible"
        process which handles the starting phase, which is linked with
        *application master*.
    - Should we test applications and supervisors? Is it practical?
      - It should be pragmatic, you shouldn't overdo and test in
        isolation you applications or supervisors, because it is not
        practical.
    - How the fully connected mesh will behave during network split?
      - Once node is connected, is known to the others, so node
        monitor will receive notification if some nodes will go up and
        down, and restore automatically mesh when network split
        disappear.

** Talks - 1st Day (23.04.2015)

*** Joe Armstrong - 23.5 days with Elixir

- Actual talk shortens to the ~10 days with Elixir ;).
- Good new stuff in *Elixir*:
  - UTF8, Sigils, Macros, "Open" design process, Book/Language
    co-design.
- But it will be interesting seeing how the ecosystem will look in
  future, so Joe used the *dr. Who* help and moved to the 2018.
  - 4 things that have been added to Elixir since 2015:
    - Forms are now (finally) expressions.
      - Note: *form* is e.g. function definitions or directives.
      - Cannot be done in Erlang, because of backward compatibility.
    - Processes and protocols have names.
      - Protocol in terms of way of communicating.
      - But, nice *DSL* can be created with use of *Elixir*.
    - Full introspection of everything.
      - Pull things apart and reconstruct them again.
      - It would be nice to have a *reflection* mechanism inside the
        language. Having e.g. `module_to_list/1` will be a way to have
        a *homoiconicity* in the language.
    - Bang Bang "the beloved" is introduced.
      - `X !! Y`
      - Send a message and wait for a reply.
      - Key for conceptual integrity in Erlang is define that
        everything is a process, and define what it means to send a
        message to not a *PID*.
- If the *Elixir* will be highly popular, there won't be place for a
  change. Now is a time for any possible changes!

*** Sasha Juric - High Availability

- *Erlang/Elixir is a hammer for that particular nail*.
  - Quote about highly available systems.
  - But it is a tool, use it responsibly with full awareness.
- *Fault Tolerance* + *Scalability* + *Responsiveness* equals *High
  Availability*
  - Introductory talk to the *Erlang* building blocks related with
    concurrency and high availability.
  - Very nice case study and approach to the `riak_core` framework.
    - Also look at the `gen_leader` library, also *Erlang* / *OTP* has
      leader election algorithms built-in (but they're *chatty*).
  - Very nice evolution process from purely sequential work-flow, to
    the fully distributed system in the online betting domain.

*** Torben Hoffmann - Building LEGO robots with Elixir

- Syntax is irrelevant, but language is everything.
  - Visual programming is not something good.
  - Instead blocks, use *Elixir* with LEGO Mindstorm.
- Linux on LEGO Mindstorm - http://ev3dev.org
  - Install *Erlang* via `apt-get` and unzip pre-compiled *Elixir* and
    you are ready to go.
  - Nice use cases - macros for defining properties, built-in support
    for state machines, support for binaries and bits level pattern
    matching and so on.
  - Library: https://github.com/lehoff/ev3
- Line follower build on top of LEGO Mindstorm, *EV3* where robot code
  is written in the *Elixir*.
- Put the protection of hardware, because software is doing strange,
  not real from the physical world perspective, things.
- Teaching Programming:
  - http://beamster.org/jb
  - What if we take the good environment (lke *Scratch*) and build
    with it a nice, visual, declarative and intuitive language for
    kids? Where you can open boxes, and see what is inside of it.

*** Thomas Arts - QuickCheck for Elixir - Generate Tests Automatically

- Instead of making up the data for the test, think about properties
  of the module / function / model.
  - Example:
    ```
    defmodule Simple do
      use ExUnit.Case
      use EQC.ExUnit

      property "Erlang Sequence" do
        forall {m, n} <- {int, int} do
          equals(:lists.seq(m, n), Enum.to_list(m .. n))
        end
      end
    end
    ```
  - Nice integration with `mix`.
- How to come up with properties?
  - Use mathematics - *idempotency*, *reversibility* etc.
  - `String.upcase` and `String.downcase` - UTF-8 characters example.
- Stateful tests - generating test cases, instead of generating data.
  - Ticket dispenser example.
  - Writing a *QuickCheck* model (state machine).
    - Investment put into the model implementation.
  - It shines when it comes to the concurrent models.
    - You can generate concurrent test cases as well.
  - Nice case study (*Elixir*):
    - https://github.com/processone/ejabberd
- You should not reimplement your approach creating the model, it
  should be different, in order to be sure that tests are good and
  converge to the same results.
  - You can do the same mistake twice!

*** Francesco Cesarini, Viktoria Fordos - Scale, Manage and Prevent!

- How to manage and develop systems that never fail and are highly
  concurrent?
  - Note: nine nines came from press release made by British Telecom
    and it is related with an initial phase of the project (!).
    - With every legend, there is a small grain of truth, but only a
      grain.
  - Five nines are much more achievable and real.
  - Ruby vs. Erlang - Asterisk wrappers (PBX on the commodity
    hardware).
    - 10 calls/s in *Ruby* vs. 10000 calls/s in *Erlang*.
  - Case study: Chicago Boss framework optimization, typical problem
    and visualization of Amdahl's Law (single, sequential bottleneck).
- How to tackle highly concurrent and scalable platforms?
  - Visibility, debugging and introspection.
    - Pre-emptive support.
    - Post-mortem debugging.
  - Predictability - latency, system behavior, what happen when errors
    will creep in?
- Case Study: MongooseIM cluster debugging with use of Wombat OAM.
- Case Study: Release project debugging with Wombat OAM.
  - It is not intrusive (< 1.5% overhead).

*** Marco Herbst, Milos Mosic - One project rebuilt 4 times: .NET, Ruby, Node and Elixir

- Justified decisions for movement between technologies.
  - Business justifications (moving to Open Source world) and
    technical ones (certain platform limitations).
    - *.NET* is not open source, business model changed.
    - *Ruby* - too slow, and not adjustable for systems which are I/O
      intensive. Community is great.
    - *Node.js* - good use case, but it is unreliable and
      unstable. Community is not mature enough.
    - *Elixir* - good from both worlds? ;)
  - Integrating *Elixir* and *Ruby* with a *Sidekiq*.
  - Replacing long running jobs, background jobs, web sockets handling
    and rest with *Elixir*.
    - Using *Ansible* on the *Elixir* side to deploy whole server
      architecture.
- Bad things:
  - *Erlang* basic knowledge required.
- Good things:
  - *Phoenix* has really good upgrade guides.

*** Claudio Ortolina - Rewriting Ruby application in Elixir

- Lessons from putting the first *Elixir* application in production
  for mostly *Ruby*-based shop.
  - Improving image transformation and streaming service based on
    *Ruby* and *Dragonfly* gem.
  - Various optimization techniques - not touching the disk, using
    caching in front of S3 buckets, cache transformation (internally -
    in memory or on the other server) etc.
    - Because of performance and constraints (Heroku etc.).
- *Elixir* fits that particular need, but no direct comparison to the
  *Ruby*.
- Pain points:
  - Heroku constraints (custom build packs, external caching layer,
    resources, no SSH access).
  - Libraries and developer tools (no official New Relic client, some
    libraries are very minimal, young and immature ecosystem).
  - Learning curve coming from *OOP* world.
- Source code: https://github.com/cloud8421/dragonfly-server

*** Jose Valim - What's ahead for Elixir?

- Polish weather, especially winter aura, helps developing Open Source
  software. ;)
- *Elixir* is a general purpose language.
  - Since beginning focused on the extensibility.
    - Not only web, but video, embedded systems, GUIs etc.
- New features:
  - Protocol consolidation (it is present even before *1.0*).
    - Build Embedded (get rid of siblings when set to *true*).
    - Last obstacle from having releases more integrated with *Elixir*
      core.
  - Start Permanent (shuts down the node when application crashes).
  - *Elixir v1.1*
    - Removing *Access* protocol (using *Dict* look-up instead).
      - Because of internal protocol dispatch implementation *Access*
        protocol can be a bottleneck in your applications.
    - More utilities in *Enum* and *Dict*.
    - *MapSet* (faster than *HashSet*).
    - Better `mix` and `rebar` integration.
    - Improving archive and scripts integration.
      - `mix archive.install git_repo/hex`
      - `mix escript.install git_repo/hex`
  - *Elixir v1.2*
    - Catching up with the improvements from *Erlang 18*.
    - `GenServer.stop/1`
    - Official support for large maps (soft deprecation of
      *HashDict*).
    - Variables in maps (`%{ key: value }`).
  - *Elixir v1.3*
    - Collections (*enumerable*, *collectable*) + Laziness based on
      *Haskell iteratees* implementation, but they are purely
      functional, what means that we can use side effects on our side.
      - How without that implement effectively these ones:
        - `Stream.merge/2`, `Stream.amb/2` ...
          - *Connectable* protocol - specifying how to connect and
            messages schema for communication. It enables routing and
            pipeline parallelism.
            - `Stream.async/1`
            - `GenRouter` behavior (with different strategies -
              *broadcast*, *round-robin*, *sharding*, *random* etc.).
  - Next step after pipeline parallelism: data parallelism and taking
    into consideration a distribution and cluster.
    - Still, plenty of questions are open - what about *back
      pressure*? Isn't a *GenRouter* became a single point of failure?
      What about *skel* project? What about other idea - moving
      computation to the data, instead of transferring terabytes of
      data over the wires?
    - It is an another tool in your toolbox (if laziness is enough,
      stop on that).

** Talks - 2nd Day (24.04.2015)

*** Chris McCord - Phoenix Takes Flight

- Quick sum up of past 7 months since *ElixirConf 2014*.
  - No massive changes on the road to *v1.0*.
- What's there and what's coming?
  - Easy install with huge *URL*.
    - Even easier install will come with *Elixir v1.1*.
      - `mix archive.install hex phoenix`
  - *Router pipeline*, it is a logical grouping for routes, which have
    similar concerns.
  - *Generators* - scaffolding etc.
    - `mix phoenix.gen.html Post posts body:text user_id:integer`
  - Assets management with *Brunch*.
    - Optional dependency.
    - ES6 support.
  - Pretty error pages, live reload, fast development mode and other
    various developer friendly improvements.
  - Channels protocols unification and various transports for
    backward compatibility.
    - *iOS*, *Android*, *CoAP*, *XMPP*, *WebSockets* and *Long
      Polling* for browsers and many, many more.
    - Channels are finally compatible with `GenServer` API and has
      `handle_info`.
- *Phoenix v1.1* - possible road-map:
  - i18n (via `gettext`).
  - Channel replay and `last-message-id`.
  - Channel presence protocol (?).
  - Nested associations.
  - Phoenix.Flux (?) - nice prototype in 100 lines of JS
    with `GenServer`-like API.
  - Generic cache store.
- Lessons Learned:
  - Avoid monolithic designs.
  - Provide seams and extension points.
  - Listen to the feedback.
  - Top-down design can work well, as long as you iterate.
- Community:
  - Be nice, be welcoming - it pays off.

*** Josh Adams - Collaborative Web-based Tetris with Phoenix

- Moving through git repository commits and building
  multi-player game with Phoenix.
  - Source code: https://github.com/knewter/elixirconfeu_tetris
    - Gradual transformation from dead simple Phoenix template to
      the more *Erlang*-like application.
    - Explanation about various issues e.g. with randomization and
      seeds in the same process.

*** Martin Kavalar, Martin Schurrer - Fast Continuous Deployment of an Elixir Gameserver and Phoenix Web App using Hot-Code-Upgrades

-

*** Jeff Weiss - Chat Bot: A Practical Walktrough of the powerful features Elixir/Erlang/OTP

-

*** Michael Schaefermeyer - Individualised Content at Web-scale

-

*** Michał Ślaski - Lessons from Erlang VM

-

*** Eric Meadows-Jonsson - Ecto

-

*** Lightning Talks

-
