* Introduction to Functional Programming - Week 0

** Definitions

Functional Programming is a language which uses expressions 
over statements to communicate intent and evaluate program. 
Statements are a very imperative way of defining 'how' to 
do it, where with use of expressions we can easily declare
'what' to do it.

** Types of Functional Programming Languages

- Lazy Functional Programming Language - e.g. Haskell.
- Strict Functional Programming Language.

** History of Programming Languages

*** 1930      - Alonzo Church, Lambda Calculus
*** 1950      - James McCarthy, Lisp
*** 1970      - Robin Milner, ML

ML was the first programming language with a 'type inference' 
mechanism.

*** 1970-1980 - David Turner, SASL -> KRC -> Miranda
*** 1987      - Haskell, design by committee
*** 2003      - Comitee published a Haskell98 standard

* Introduction to Functional Programming - Week 1

** Getting Started

*** Haskell Platform (http://www.haskell.org/platform)
**** Glasgow Haskell Platform (GHC and GHCi REPL)
*** Prelude is a basic, standard library for Haskell
**** Operations on lists are not the O(1)
***** Indexing, length etc. 
*** Coding Standards
**** Variables and Functions must start from lower case letter
**** But you can use single quotes in names.
**** By convention variable names which ends on 's' like 'xs' are lists.
**** Double or more 's' at the end means that there are more lists nested.
**** Haskell is whitespace significant (Layout Rule)
***** Used instead explicit groupping. 
*** There is a JVM version of Haskell called 'Ferge'
* Introduction to Functional Programming - Week 2
** Naming

'Haskell' is named after Haskell C. Curry, which invents
the mechanism of 'Currying'.

** Curried Functions

All functions in Haskell are defined in curried form, 
as a function with on argument which returns a function 
with one argument.

Currying is right-associative.

** Partial Application

Partial Application is a process of creating new function,
with predefined argument from curried form. By 'applying' 
we are calling function invocation.
** Polymorphic Functions

'Polymorphic function' ("of many forms") is a generic function,
which contains one or more type variable. By convention type variables
are usually named 'a', 'b' and 'c'.

You can overload polymorphic function by specifying one or more class
constraints. It is more than a restriction not overloading, but it is 
used in the same way as overloading in imperative languages.

** What is a 'Prelude'?

Standard 'Prelude' is a standard library for Haskell, included by default
to the script and 'GHCi' also.
* Introduction to Functional Programming - Week 3
** Conditional Expressions

Haskell has only conditional expressions (there are no statements),
and they should always have 'else' clauses.

** Guarded Equations

Guards are really helpful concepts in conditionals, especially in
pattern matching (also called 'guarded equations').

** Pattern Matching

Speaking of pattern matching, you can define multihead functions (like
in Erlang) which have different implementations for each specified 
function head.

Unbounded variables is marked as underscore (_).

Patterns are evaluated in order and only shared variable from
match clauses can be a unbound underscore placeholder.

When there is no match in written patterns compiler will raise an error.
** Lambdas

Lambda Calculus was invented in 1930 by Alonzo Church. Almost any modern
programming language has lambdas in the specification.

Lambdas in Haskell are not binding the higher scopes, as it usually happens
in the rest of languages (so actually it is the closest implementation
of lambda calculus, because in other languages lambdas should be named 
rather as 'closures' than lambdas from the original calculus).

It is useful to denote via 'lambda' that a function explicitly returns 
a new function. Lambda expression is anonymous, which is actually the 
benefit e.g. regarding mapping, filtering and using higher order functions
and transformers.

** Sections

You can partially apply any function on both sides - from left and right 
by using sections, like presented below:

> 1 + 2 
3

> (1+) 2
3

> (+2) 1
3

This kind of partial application is called a 'sectioning'.
* Introduction to Functional Programming - Week 4
** List Comprehensions

They have origins in math. Mathematicians use 'set comprehensions', however it is 
hard to implement identity recognition on top of functions, so instead they have
taken the concept, simplified it and mapped over the lists.

List Comprehension is built from generators (1 or more) and building clause (it
can also have one or more filters, in Haskell called 'guards'). 

Generator can depend on the variables introduced by earlier generators.

In Haskell strings are the syntactic sugar over a list of characters (it is created 
as an alias - type synonym with a 'type' keyword).

* Introduction to Functional Programming - Week 5

** Recursive Functions

Tail Call Elimination (tail call recursion) - important way of handling control 
structures.

There is no explicit benefit and guideline for creating only recursive or 
non-recursive functions (it depends on the context and attitude).

Other benefit - Induction can be used to determine properties of functions.
* Introduction to Functional Programming - Week 6

** Higher-Order Functions

Function is called higher-order function if it takes a function as an argument
or returns a function as a result. It is useful to wrap common programming idioms,
DSL can be defined in terms of collection of higher-order functions, and last but
not least we can reason about programs composed from higher-order functions because
they have algebraic properties. 

Simple examples: map, fold, filter etc.

Fold are special family of higher order functions, which uses function 'f' as a
generalization of list concatenation. Fold family is a homomorphism over list. 
It respects the structure of the list, but it replaces empty list with a passed 
initial value called 'v'

f []       = v
f (x : xs) = x @ f xs

Where '@' operator is a replacement for cons operator. E.g. 'sum', 'product', 'and' etc.
are using simgeneralization's, very similar to the fold generalization. 

Functions which are defined in term of foldr can be proved using algebraic 
properties of it, such as fusion and banana split rule.

Function composition in Haskell is represented by '.' operator:

(.)  :: (b -> c) -> (a -> b) -> (a -> c)
f . g = \x -> f (g x)

** Church Numerals

General representation of number, by means of functions and function definition.

type Church = (a -> a) -> a -> a

It takes a function (*successor function*) and neutral element (e.g. a zero number)
and it returns the Church representation of this number. So in general, it is 'n' 
times applied a *successor function* over a *zero number*.

Example:

two = \s z -> s (s z)
two = \s z -> (s . s) z
two = \s   -> s . s           

In the last step, removing 'z' is an operation from lambda calculus 
called an *eta reduction*.

Conversion from Church notation to Integer:

c2i x = x (+ 1) 0

Regarding the representation, we have to define separately all operations like 
addition, subtraction etc. in order to manipulate Church numerals properly e.g.:

add x y = \s z -> x s (y s z)

mul x y = \s z -> x (y s) z
        = \s z -> x . y

* Introduction to Functional Programming - Week 7

** Functional Parsers and Monads

Parser is a program is a program that analyses a piece of text to determine its
syntactic structure.

  type Input = String
  type RestOfInput = String
  type Parser = Input -> (Tree, RestOfInput)

Only if grammar is non-ambiguous and it has only one output representation.
Or more general:

  type Parser a = String -> [ (a, String) ]

Singleton list is a list only with one element. Parser in this case has the exact 
same properties as monads, so it can be sequenced (with 'do' notation) and 
transformed with use of other monads (writer, reader etc.).

* Introduction to Functional Programming - Week 8

** Interactive Programs

If you program does not communicate with external world, does not use I/O in order
to communicate with the rest of the world, it may not exist at all.

By introducing *I/O monad* in Haskell we are introducing notion of statements and 
imperative way of handling side effects. E.g. the most imperative type is a I/O unit 
which is defined as *IO ()*.

The most important is balance between pure and impure code. Good analogy is: 
"An Island of Purity in the sea of impurity".
